version = "2.5.0-RC3"

maxColumn = 120
docstrings = ScalaDoc
encoding = "UTF-8"
lineEndings = unix
indentYieldKeyword = true
importSelectors = noBinPack
unindentTopLevelOperators = false
includeCurlyBraceInSelectChains = true
includeNoParensInSelectChains = true
assumeStandardLibraryStripMargin = true
poorMansTrailingCommasInConfigStyle = false
trailingCommas = never

project {
  includeFilters = [
    ".*\\.scala$"
    ".*\\.sbt$"
  ]
  excludeFilters = []
}

runner {
  debug = false
  ignoreWarnings = false
  fatalWarnings = false
}

optIn {
  configStyleArguments = true
  breaksInsideChains = false
  breakChainOnFirstMethodDot = true
  selfAnnotationNewline = true
  annotationNewlines = true
  forceBlankLineBeforeDocstring = true
}

binPack {
  unsafeCallSite = false
  unsafeDefnSite = false
  parentConstructors = false
  literalArgumentLists = true
  literalsIncludeSimpleExpr = false
  literalsSingleLine = false
  literalsMinArgCount = 5
  literalsInclude = [
    ".*"
  ]
  literalsExclude = [
    String
    "Term.Name"
  ]
}

continuationIndent {
  callSite = 2
  defnSite = 2
  extendSite = 2
}

align {
  preset = most
  stripMargin = false
  openParenDefnSite = false
  tokens.add = [
    {code = "="}
  ]
}

danglingParentheses {
  callSite = true
  defnSite = true
  exclude = []
}

spaces {
  beforeContextBoundColon = Never
  afterTripleEquals = false
  inImportCurlyBraces = false
  inParentheses = false
  neverAroundInfixTypes = []
  afterKeywordBeforeParen = true
  inByNameTypes = true
  afterSymbolicDefs = false
}

literals {
  long = Upper
  float = Upper
  double = Upper
  hexDigits = Upper
  hexPrefix = Lower
  scientific = Upper
}

newlines {
  source = keep
  neverInResultType = false
  neverBeforeJsNative = false
  sometimesBeforeColonInMethodReturnType = true
  penalizeSingleSelectMultiArgList = true
  alwaysBeforeCurlyBraceLambdaParams = false
  topLevelStatementsMinBreaks = 1
  topLevelStatements = []
  alwaysBeforeTopLevelStatements = false
  afterCurlyLambda = squash
  implicitParamListModifierForce = []
  alwaysBeforeElseAfterCurlyIf = true
  alwaysBeforeMultilineDef = true
  afterInfix = null
  afterInfixBreakOnNested = false
  afterInfixMaxCountPerExprForSome = 10
  afterInfixMaxCountPerFile = 500
  avoidAfterYield = true
}

rewrite {
  rules = [
    SortModifiers
    SortImports
    PreferCurlyFors
    RedundantBraces
    RedundantParens
  ]
  redundantBraces {
    methodBodies = true
    includeUnitMethods = true
    maxLines = 100
    stringInterpolation = true
    parensForOneLineApply = true
    generalExpressions = true
  }
  sortModifiers.order = [
    "implicit", "final", "sealed", "abstract",
    "override", "private", "protected", "lazy"
  ]
}

rewriteTokens = {
  "⇒": "=>"
  "→": "->"
  "←": "<-"
}

verticalMultiline {
  atDefnSite = false
  arityThreshold = 100
  newlineBeforeImplicitKW = false
  newlineAfterImplicitKW = false
  newlineAfterOpenParen = true
}
